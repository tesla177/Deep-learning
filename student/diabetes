# @Author: 刘氏生
# @Time:   2022/11/29 11:32

import numpy as np
import torch
import matplotlib.pyplot as plt

xy = np.loadtxt('diabetes.csv',delimiter=',',dtype=np.float32)
x_data = torch.from_numpy(xy[0:650,:-1])
y_data = torch.from_numpy(xy[0:650,[-1]])

class Model(torch.nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.linear1 = torch.nn.Linear(8,6)
        self.linear2 = torch.nn.Linear(6,4)
        self.linear3 = torch.nn.Linear(4,2)
        self.linear4 = torch.nn.Linear(2,1)
        self.relu = torch.nn.ReLU()
        self.sigmoid = torch.nn.Sigmoid()
    def forward(self,x):
        x = self.relu(self.linear1(x))
        x = self.relu(self.linear2(x))
        x = self.relu(self.linear3(x))
        x = self.sigmoid(self.linear4(x))
        return x
model = Model()
criterion = torch.nn.BCELoss()
optimizer = torch.optim.SGD(model.parameters(),lr=0.1)
epoch_list = []
loss_list = []

for epoch in range(10000):
    y_p = model(x_data)
    loss = criterion(y_p,y_data)
    if epoch % 100 ==99:
        print(loss.item(), epoch)
        epoch_list.append(epoch)
        loss_list.append(loss.item())
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
plt.plot(epoch_list,loss_list)
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()

print("----------------")
x_test = torch.from_numpy(xy[650:,:-1])
y_pred2 = model(x_test)
y_pp = y_pred2.tolist()
ans = []
for x in y_pp:
    if x[0] > 0.5:
        ans.append(1)
    else:
        ans.append(0)

y_test = torch.from_numpy(xy[650:,[-1]])
y_1 = y_test.tolist()
sum = 0
for i in range(len(ans)):
    if ans[i] == y_1[i][0]:
        sum+=1
print(sum/len(ans))
